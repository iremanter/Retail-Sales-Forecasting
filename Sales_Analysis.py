# -*- coding: utf-8 -*-
"""FDA_Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UcowYyeb-jiYmIuCs3mECl_rifMvjMH4
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('sales_data_sample.csv',encoding='latin1');



df.info()

df.describe()

df.head()

df.dtypes

df.isna().sum()

df = df.fillna('Unknown')

df.isna().sum()

# Convert 'ORDERDATE' column to datetime format
df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])

# Extract useful features from the 'ORDERDATE' column
df['Year'] = df['ORDERDATE'].dt.year
df['Month'] = df['ORDERDATE'].dt.month
df['Day'] = df['ORDERDATE'].dt.day
df['DayOfWeek'] = df['ORDERDATE'].dt.dayofweek

df.info()

#sales by year
sales_year= df.groupby('Year').agg({'SALES':'sum'}).reset_index()
fig, ax0 = plt.subplots()
sns.barplot (data = sales_year, y = 'SALES', x = 'Year', ax = ax0)
ax0.set_title('Yearly Sales')
sales_year

#sales by country
sales_country= df.groupby('COUNTRY').agg({'SALES':'sum'}).reset_index()
fig, ax0 = plt.subplots()
sns.barplot (data = sales_country, y = 'COUNTRY', x = 'SALES', ax = ax0)
ax0.set_title('Sales by Country')
sales_country

# Plot histogram for SALES using Matplotlib
plt.figure(figsize=(10, 6))
plt.hist(df['SALES'], bins=30, edgecolor='k', alpha=0.7)
plt.xlabel('Sales Amount')
plt.ylabel('Frequency')
plt.title('Histogram of Sales Amount')
plt.show()

# Plot histogram for SALES using Seaborn
plt.figure(figsize=(10, 6))
sns.histplot(df['SALES'], bins=30, kde=True)
plt.xlabel('Sales Amount')
plt.ylabel('Frequency')
plt.title('Histogram of Sales Amount')
plt.show()

#Exploratory Data Analysis (EDA):

#to find the correlation we need to eliminate the categorical data
columns_drop=['ORDERDATE','STATUS','MONTH_ID','PRODUCTCODE','CUSTOMERNAME','PHONE','ADDRESSLINE1',
              'ADDRESSLINE2','CITY','STATE','POSTALCODE','COUNTRY','TERRITORY','CONTACTLASTNAME',
              'CONTACTFIRSTNAME','DEALSIZE','PRODUCTLINE']
df = df.drop(columns_drop, axis=1)

df.dtypes

correlation_matrix = df.corr()

# Display the correlation matrix
print("\nCorrelation Matrix:")
print(correlation_matrix)

correlation_matrix['SALES'] #QUANTITYORDERED and PRICEEACH have the most significant effect on sales

sns.scatterplot(x = 'QUANTITYORDERED', y = 'SALES' , data = df,

 hue = 'SALES'
  )
plt.show()

#4. Regression Analysis:

from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

scaler = MinMaxScaler()

df = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

df.head()

# Select independent (X) and dependent variable (y)
X = df[['QUANTITYORDERED', 'PRICEEACH']]
y = df['SALES']

# Split data into train dataset and test dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_test)

print(y_pred)

# Evaluate model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print('Mean Squared Error:', mse)
print("R^2 Score:", r2)
print("Mean Absolute Error:", mae)